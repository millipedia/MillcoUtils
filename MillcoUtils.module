<?php

namespace ProcessWire;

use function PHPSTORM_META\map;

/**
 * MillcoUtils
 * 
 * Just a collection of things we like to have in a site.
 * stephen @ millipedia.com
 */


class MillcoUtils extends WireData implements Module, ConfigurableModule
{

	public $nonce = ''; // a page nonce we set for use in inline scripts etc
	public $mu_settings; // some sitewide settings.


	public static function getModuleInfo()
	{
		return [
			'title' => 'MillcoUtils',
			'summary' => 'Very simple config options we often use.',
			'version' => 103,
			'autoload' => true,
			'singular' => true,
			'permanent' => false,
			'permission' => '',
			'icon' => 'cogs',
			'requires' => [
				'PHP>=8.0.0',
				'ProcessWire>=3.0.16',
			],
			'installs' => [
				'ProcessMillcoUtils',
				'TextformatterMillcoUtils'
			]
		];
	}

	// Add config fields.
	function getModuleConfigInputfields(InputfieldWrapper $inputfields)
	{
		// at the moment we have our settings on separate page now
		// handled by ProcessMillcoUtils.... so maybe this doesn't
		// need to be a configurable module at all now.

		// Let's add the readme to the config page tho.

		$readme = $this->wire->files->render(__DIR__."/README.md");
		$inputfields->add([
		  'type' => 'markup',
		  'label' => 'Readme',
		  'icon' => 'life-ring',
		  'collapsed' => Inputfield::collapsedYesAjax,
		  'value' => $this->wire->sanitizer->entitiesMarkdown($readme, true),
		]);

		return $inputfields;
	}

	static protected $defaults = array(
		'top' => '',
		'right' => '',
		'bottom' => '',
		'left' => '',
		'eb_vertical' => '0',
		'bluesky' => '',
		'youtube' => '',
		'facebook' => '',
		'instagram' => '',
		'extra_buttons' => '',
		'cabin' => '0',
		'cabin_custom' => '',
		'fathom' => '',
		'analytics_in_dev' => '0',
		'inline_image_path' => 'icons',
		'load_admin_tweaks' => '0',
		'load_admin_scripts' => '0'

	);

	public function get_defaults()
	{
		return self::$defaults;
	}

	public function __construct()
	{
		// populate defaults, which will get replaced with actual
		// configured values before the init/ready methods are called
		// Updating this array is done in ProcessMillcoUtils now.
		$this->setArray(static::$defaults);
	}


	// 	init() method: This is called during the initialization after all modules have been loaded but before ProcessWire has fully bootstrapped and started delivering content.
	//  It's the right place to add hooks or events that occur before page rendering starts.

	public function init()
	{
		/** @var MillcoUtils $this */

		// make this module available in template files using $mu
		$this->wire('mu', $this);

		// set a nonce we can use in script tags.
		$nonce = base64_encode(random_bytes(20));
		$this->nonce = $nonce;

		// and add a hook to get the nonce easily.
		$this->addHookProperty("Page::nonce", $this, "hook_nonce");

		// add our page edit buttons.
		$this->addHookAfter('Page::render', $this, 'edit_buttons');

		// add our analytics tag
		$this->addHookAfter('Page::render', $this, 'analytics_tags');

		// add our ajax endpoints.
		$this->ajaxAddEndpoints();

		// Add admin tweak styles if the user has opted in.
		$moduleConfig = $this->modules->getConfig('MillcoUtils');

		if (array_key_exists('load_admin_tweaks', $moduleConfig) && $moduleConfig['load_admin_tweaks']) {
			$this->config->styles->add($this->config->urls->MillcoUtils . "css/admin_tweaks.css");
		}

		// Add HTMX to admin if the user has opted in.
		// Cos we use HTMX in various modules I just want to be able to load it in one place.
		if (array_key_exists('load_admin_scripts', $moduleConfig) && $moduleConfig['load_admin_scripts']) {
			$this->config->scripts->add($this->config->urls->MillcoUtils . "lib/htmx/htmx.min.js");
		}

	}

	//ready() method: This is called after ProcessWire is fully bootstrapped, and is about to start rendering a page. At this point, the entire API is available and ready for use. This method can be used when you depend on the current page being accessed, like changing or adding certain behaviors or settings based on the current page or user.
	public function ready() {}


	public function hook_nonce($event)
	{
		$event->return = $this->nonce;
	}

	/**
	 * Add hooks for ajax endpoints in the templates/ajax folder.
	 * This is a much simpler version of the RockFrontend ajaxAddEndpoints method.
	 */
	protected function ajaxAddEndpoints(): void
	{

		$ajax_folder = wire('config')->paths->templates . 'ajax';

		// Bail out early if the folder doesn't exist.
		if (!$this->wire->files->exists($ajax_folder)) {
			return;
		}

		// Loop through all php files in the ajax folder
		$ext = 'php';
		$opt = ['extensions' => [$ext]];
		$endpoints = $this->wire->files->find($ajax_folder, $opt);
		foreach ($endpoints as $file) {

			// get url after folder
			// we can't use basename because we support nested folders/endpoints
			$ajax_url = substr($file, strlen($ajax_folder), - (strlen($ext) + 1));

			// all our ajax endpoints begin with /ajax/ cos hey, that's the way I like it.
			$ajax_url = '/ajax' . $ajax_url;

			wire()->addHook($ajax_url, function (HookEvent $event) use ($file) {

				// All we do is include the file and let it do its own thing,
				// so you'll need to handle the response in your own file.
				$response = wire('files')->render($file);
				$event->return = $response;

			});
		}
	}


	/**
	 * modify the return value of Page::render() to add our edit toolbar markup. 
	 * 
	 */

	public function edit_buttons($event)
	{

		// Bail out early if we don't have permission to do this.
		// TODO. Might be nice to set a which groups get the edit button (and
		// not the admin settings).

		if (!(wire('user')->hasPermission('millco-utils'))) {
			return;
		}

		// Get the current page
		$page = $event->object;

		if (!($page->template == 'admin')) {

			// Edit link to admin for howard.
			// which is in fact really useful.
			if (wire('user')->isLoggedin() && $page->editable()) {

				$path = wire('config')->paths->siteModules . 'MillcoUtils/markup/markup_edit_button.php';

				$edit_butt_markup = wire('files')->render($path);

				$updated = str_replace('</body', $edit_butt_markup . '</body', $event->return);

				$event->return = $updated;
			}
		}
	}


	/**
	 * Add analytics tags
	 */

	public function analytics_tags($event)
	{

		$page = $event->object;
		if (!($page->template == 'admin') && !($page->template == 'api')) {

			// if we're in dev mode and don't have analytics_in_dev seleted
			// then just bail out.
			if (wire('config')->debug && !($this->analytics_in_dev)) {
				return;
			}

			$tags_to_add = '';

			// Have we checked the Add Cabin checkbox?
			if ($this->cabin) {

				// If we have a custom domain provide then use that
				// instead of the default domain.

				$cabin_domain = 'scripts.withcabin.com';

				if (!empty($this->cabin_custom)) {
					$cabin_domain = $this->cabin_custom;
				}

				$tags_to_add .= ' <script async defer src="https://' . $cabin_domain . '/hello.js" nonce="' . $this->nonce . '"></script>' . PHP_EOL;
			}

			// Add a tag for Fathom analytics (https://usefathom.com)
			// if we've entered a site code.
			$fathom = $this->fathom;

			if (!empty($fathom)) {

				$tags_to_add .= ' <script src="https://cdn.usefathom.com/script.js" data-site="' . $fathom . '" nonce="' . $this->nonce . '=" defer></script>' . PHP_EOL;
			}

			// If we have something to add then inject
			// it before the closing </head> tag.
			if ($tags_to_add !== '') {
				// Check for the closing </head> tag, or <body for pages without head tags.
				$headPos = strpos($event->return, '</head>');
				if ($headPos !== false) {
					$event->return = substr_replace($event->return, $tags_to_add, $headPos, 0);
				} else {
					// should probably be checking if body tag exists instead.
					$bodyPos = strpos($event->return, '<body');
					if ($bodyPos !== false) {
						$event->return = substr_replace($event->return, '<head>' . $tags_to_add . '</head>', $bodyPos, 0);
					}
				}
			}
		}
	}


	/**
	 * load an icon inline from a file
	 * @param String $filename
	 * 
	 * Takes the name of an svg file (without extension) and reads in the data 
	 * from the file if it exists in /site/assets/images/
	 * You can set a subfolder in the utils admin settings to change the path.
	 * tip: using currentColor in your SVG is very useful.
	 */

	public function file_icon($filename)
	{

		// We now have a config value for the base path relative to images
		$inline_image_path = $this->inline_image_path;

		$inline_image_path = str_replace('..', '', $inline_image_path); // let's not allow iterating up the path.

		// sort out directory separators in case our user has added them;
		if ($inline_image_path !== '') {
			$inline_image_path = rtrim($inline_image_path, "/");
			$inline_image_path = ltrim($inline_image_path, "/");
			$inline_image_path .= '/';
		}

		$path = wire('config')->paths->assets . 'images/' . $inline_image_path;

		return $this->get_icon_markup($filename, $path);
	}

	/**
	 * load an icon inline from our module icons folder
	 * @param String $filename
	 * 
	 */

	 public function icon($filename)
	 {
 
		 $path = wire('config')->paths->siteModules . 'MillcoUtils/icons/';
		 return $this->get_icon_markup($filename, $path);

	 }

	/**
	 * get_icon_markup
	 * Given a filename and a path, grab the svg and return it as a string.
	 * 
	 * @param String $filenamepath
	 * @return String
	 */

	private function get_icon_markup($filename, $path) {

		// In case we've passed the filename with .svg on the end then remove it.
		// I guess it could be the case we have an oddly named file but not as often
		// as I forget and leave the extension on.
		$suffix = substr($filename, -4);
		if ($suffix == '.svg') {
			$filename = substr($filename, 0, -4);
		}

		$filename = $path . $filename . '.svg';

		$icon_markup = '';

		if (file_exists($filename) && $icon = file_get_contents($filename)) {
			$icon_markup = $icon;
			return $icon_markup;
		} else {

			// Dump to Tracy if it's installed.
			if(function_exists('bd')){
				bd('missing icon: ' . $filename);
			}

			return '?';
		
		}
	}

	/**
	 * Return the markup for our modal dialog widget.
	 * 
	 * @return String
	 */

	public function modialog()
	{

		// Bail out early if we don't have permission to do this.
		if (!(wire('user')->hasPermission('millco-utils'))) {
			return;
		}

		$path = wire('config')->paths->siteModules . 'MillcoUtils/markup/modialog.php';

		$modialog_markup = wire('files')->render($path, ['mu' => $this]);

		return $modialog_markup;

	}


	/**
	 * Source set
	 * 
	 * Takes a Pageimage object and does some basic source setting.
	 * 
	 * @param Pageimage $image
	 * @param Int widht
	 * @param Int height
	 * @param Array options
	 */


	function source_set($image, $width = 1440, $height = 'auto', $options = array())
	{

		$image_markup = '';
		$caption = '';
		$alt = '';
		$classes = '';

		$quality = 72;
		$upscale = false;
		$webp_quality = 62;


		if (isset($options['quality']) && $options['quality'] == 'high') {
			$quality = 80;
			$webp_quality = 80;
		}

		if (isset($options['upscale']) && $options['upscale']) {
			$upscale = true;
		}

		if (isset($options['class'])) {
			$classes .= $options['class'];
		} else {
			$classes = ' image_fluid';
		}

		if ($image) {

			// Resize our image.
			$thumb = $image->size($width, $height, [
				'quality' => $quality,
				'webpQuality' => $webp_quality,
				'upscaling' => $upscale,
				'sharpening' => 'medium'
			]);


			// Caption and alt text are pulled from custom fields.
			// the name of which has varied over the years hence we check for a few different
			// options.
			if ($image->img_alt) {
				$alt = $image->img_alt;
			}elseif($image->image_alt) {
				$alt = $image->image_alt;
			}elseif ($image->text_field) {
				$alt = $image->text_field;
			}elseif ($image->description) {
			} elseif ($image->image_alt) {
				$alt = $image->image_alt;
			} elseif ($image->description) {
				$alt = $image->description;
			}

			// If we have a no_caption option then don't add a caption.
			if (isset($options['no_caption']) && $options['no_caption'] == 1) {
				$caption = '';
			} else {
				// again, these are all fields I've used for the caption over the years.
				if ($image->img_caption) {
					$caption = $image->img_caption;
				} elseif ($image->image_caption) {
					$caption = $image->image_caption;
				} elseif ($image->caption) {
					$caption = $image->caption;
				}elseif ($image->sub_content) {
					$caption = $image->sub_content;
				}

				// We can't have paragraph tags in the caption.
				$caption = mb_ereg_replace('^<p>|</p>$', '', $caption);
			}

			// default to lazy loading.
			if (isset($options['not_lazy']) && $options['not_lazy'] == 1) {
				$lazy = '';
			} else {
				$lazy = ' loading=lazy';
			}

			$image_markup .= '<picture>';
			$image_markup .= '<source srcset="' . $thumb->webp->url . '" type="image/webp">';

			// if our picture is wider than 480px let do a version for phones  etc....
			// I know it's not very exact but it's better than nothing.
			$smol_width = 480;

			if ($thumb->width > $smol_width) {

				$pic_ratio = $thumb->width / $thumb->height;

				$smol_height = $smol_width / $pic_ratio;

				$smol_pic = $image->size($smol_width, $smol_height, [
					'quality' => $quality,
					'webpQuality' => $webp_quality,
					'upscaling' => false,
					'sharpening' => 'medium'
				]);

				$image_markup .= '<source media="(max-width: 480px)" srcset="' . $smol_pic->webp->url . '" type="image/webp">';
			}

			$image_markup .= '<img class="' . $classes . '" src="' . $thumb->url . '" alt="' . $alt . '" width="' . $thumb->width . '" height="' . $thumb->height . '" ' . $lazy . '>';
			$image_markup .= '</picture>';

			// let's only wrap in a figure now if we have a caption.
			if ($caption !== '') {
				$image_markup = '<figure>' . $image_markup;
				$image_markup .= '<figcaption>' . htmlspecialchars_decode($caption) . '</figcaption>';
				$image_markup .= '</figure>';
			}
		}

		return $image_markup;
	}
}
