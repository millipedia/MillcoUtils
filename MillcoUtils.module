<?php

namespace ProcessWire;

use function PHPSTORM_META\map;

/**
 * MillcoUtils
 * 
 * Just a collection of things we like to have in a site.
 * stephen @ millipedia.com
 */


class MillcoUtils extends WireData implements Module, ConfigurableModule
{

	public $nonce = ''; // a page nonce we set for use in inline scripts etc
	public $mu_settings; // some sitewide settings.


	public static function getModuleInfo()
	{
		return [
			'title' => 'MillcoUtils',
			'summary' => 'Very simple config options we often use.',
			'version' => 2,
			'autoload' => true,
			'singular' => true,
			'permanent' => false,
			'permission' => 'millco-utils',
			'icon' => 'cogs',
			'requires' => [
				'PHP>=8.0.0',
				'ProcessWire>=3.0.16',
			],
			'installs' => ['ProcessMillcoUtils']
		];
	}

	// Add config fields.
	function getModuleConfigInputfields(InputfieldWrapper $inputfields)
	{
		// at the moment we have our settings on separate page now
		// handled by ProcessMillcoUtils.... so maybe this doesn't
		// need to be a configurable module at all now.
		return $inputfields;
	}

	static protected $defaults = array(
	);

	public function __construct()
	{
		// populate defaults, which will get replaced with actual
		// configured values before the init/ready methods are called
		// again this is done in ProcessMillcoUtils now.
		$this->setArray(self::$defaults);
	}


	// 	init() method: This is called during the initialization after all modules have been loaded but before ProcessWire has fully bootstrapped and started delivering content.
	//  Itâ€™s the right place to add hooks or events that occur before page rendering starts.

	public function init()
	{
		/** @var MillcoUtils $this */

		// make this module available in template files using $mu
		// eg $mu->twitter;
		$this->wire('mu', $this);

		// set a nonce we can use in script tags.
		$nonce = base64_encode(random_bytes(20));
		$this->nonce = $nonce;

		// and add a hook to get the nonce easily.
		$this->addHookProperty("Page::nonce", $this, "hook_nonce");

		// add our page edit buttons.
		$this->addHookAfter('Page::render', $this, 'edit_buttons');

	}


	//ready() method: This is called after ProcessWire is fully bootstrapped, and is about to start rendering a page. At this point, the entire API is available and ready for use. This method can be used when you depend on the current page being accessed, like changing or adding certain behaviors or settings based on the current page or user.
	public function ready()
	{
	}

	
	public function hook_nonce($event)
	{
		$event->return = $this->nonce;
	}

	/**
	 * modify the return value of Page::render() to add our edit toolbar markup. 
	 * 
	 */

	public function edit_buttons($event)
	{

		// Bail out early if we don't have permission to do this.
		// TODO. Might be nice to set a which groups get the edit button (and
		// not the admin settings).

		if (!(wire('user')->hasPermission('millco-utils'))) {
			return;
		}

		// Get the current page
		$page = $event->object;

		if (!($page->template == 'admin')) {

			// Edit link to admin for howard.
			// which is in fact really useful.
			if (wire('user')->isLoggedin() && $page->editable()) {

				// $edit_butt_markup='<div class="mu_edit_bar">';

				// // TODO 
				// // Add different options for super users.
				// $edit_butt_markup.= "<a class='edit-link' href='$page->editUrl'>Edit</a>";

				// $edit_butt_markup.='</div>';

				$path = wire('config')->paths->siteModules . 'MillcoUtils/markup_edit_button.php';

				$edit_butt_markup = wire('files')->render($path);

				$updated = str_replace('</body', $edit_butt_markup . '</body', $event->return);

				$event->return = $updated;
			}
		}
	}


	/**
	 * load an icon inline from a file
	 * @param String $filename
	 * 
	 * Takes the name of an svg file (without extension) and reads in the data 
	 * from the file if it exists in /site/assets/images/icons
	 * tip: using currentColor in your SVG is very useful.
	 */

	public function file_icon($filename)
	{

		$path = wire('config')->paths->assets . 'images/icons/';
		$filename = $path . $filename . '.svg';
		$icon_markup = '';

		if ($icon = file_get_contents($filename)) {

			$icon_markup = $icon;

			return $icon_markup;
		} else {

			return '?';
		}
	}
}
